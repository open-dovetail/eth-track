// Code generated by go-web3/abigen. DO NOT EDIT.
// Hash: 62e136008ed68ea54af71c8692df75a0046f82e2fcdc8410b6bf1bd3bf81a255
package erc777

import (
	"fmt"
	"math/big"

	web3 "github.com/umbracle/go-web3"
	"github.com/umbracle/go-web3/contract"
	"github.com/umbracle/go-web3/jsonrpc"
)

var (
	_ = big.NewInt
)

// ERC777 is a solidity contract
type ERC777 struct {
	c *contract.Contract
}

// NewERC777 creates a new instance of the contract at a specific address
func NewERC777(addr web3.Address, provider *jsonrpc.Client) *ERC777 {
	return &ERC777{c: contract.NewContract(addr, abiERC777, provider)}
}

// Contract returns the contract object
func (e *ERC777) Contract() *contract.Contract {
	return e.c
}

// calls

// Allowance calls the allowance method in the solidity contract
func (e *ERC777) Allowance(holder web3.Address, spender web3.Address, block ...web3.BlockNumber) (retval0 *big.Int, err error) {
	var out map[string]interface{}
	var ok bool

	out, err = e.c.Call("allowance", web3.EncodeBlock(block...), holder, spender)
	if err != nil {
		return
	}

	// decode outputs
	retval0, ok = out["0"].(*big.Int)
	if !ok {
		err = fmt.Errorf("failed to encode output at index 0")
		return
	}
	
	return
}

// BalanceOf calls the balanceOf method in the solidity contract
func (e *ERC777) BalanceOf(tokenHolder web3.Address, block ...web3.BlockNumber) (retval0 *big.Int, err error) {
	var out map[string]interface{}
	var ok bool

	out, err = e.c.Call("balanceOf", web3.EncodeBlock(block...), tokenHolder)
	if err != nil {
		return
	}

	// decode outputs
	retval0, ok = out["0"].(*big.Int)
	if !ok {
		err = fmt.Errorf("failed to encode output at index 0")
		return
	}
	
	return
}

// Decimals calls the decimals method in the solidity contract
func (e *ERC777) Decimals(block ...web3.BlockNumber) (retval0 uint8, err error) {
	var out map[string]interface{}
	var ok bool

	out, err = e.c.Call("decimals", web3.EncodeBlock(block...))
	if err != nil {
		return
	}

	// decode outputs
	retval0, ok = out["0"].(uint8)
	if !ok {
		err = fmt.Errorf("failed to encode output at index 0")
		return
	}
	
	return
}

// DefaultOperators calls the defaultOperators method in the solidity contract
func (e *ERC777) DefaultOperators(block ...web3.BlockNumber) (retval0 []web3.Address, err error) {
	var out map[string]interface{}
	var ok bool

	out, err = e.c.Call("defaultOperators", web3.EncodeBlock(block...))
	if err != nil {
		return
	}

	// decode outputs
	retval0, ok = out["0"].([]web3.Address)
	if !ok {
		err = fmt.Errorf("failed to encode output at index 0")
		return
	}
	
	return
}

// Granularity calls the granularity method in the solidity contract
func (e *ERC777) Granularity(block ...web3.BlockNumber) (retval0 *big.Int, err error) {
	var out map[string]interface{}
	var ok bool

	out, err = e.c.Call("granularity", web3.EncodeBlock(block...))
	if err != nil {
		return
	}

	// decode outputs
	retval0, ok = out["0"].(*big.Int)
	if !ok {
		err = fmt.Errorf("failed to encode output at index 0")
		return
	}
	
	return
}

// IsOperatorFor calls the isOperatorFor method in the solidity contract
func (e *ERC777) IsOperatorFor(operator web3.Address, tokenHolder web3.Address, block ...web3.BlockNumber) (retval0 bool, err error) {
	var out map[string]interface{}
	var ok bool

	out, err = e.c.Call("isOperatorFor", web3.EncodeBlock(block...), operator, tokenHolder)
	if err != nil {
		return
	}

	// decode outputs
	retval0, ok = out["0"].(bool)
	if !ok {
		err = fmt.Errorf("failed to encode output at index 0")
		return
	}
	
	return
}

// Name calls the name method in the solidity contract
func (e *ERC777) Name(block ...web3.BlockNumber) (retval0 string, err error) {
	var out map[string]interface{}
	var ok bool

	out, err = e.c.Call("name", web3.EncodeBlock(block...))
	if err != nil {
		return
	}

	// decode outputs
	retval0, ok = out["0"].(string)
	if !ok {
		err = fmt.Errorf("failed to encode output at index 0")
		return
	}
	
	return
}

// Symbol calls the symbol method in the solidity contract
func (e *ERC777) Symbol(block ...web3.BlockNumber) (retval0 string, err error) {
	var out map[string]interface{}
	var ok bool

	out, err = e.c.Call("symbol", web3.EncodeBlock(block...))
	if err != nil {
		return
	}

	// decode outputs
	retval0, ok = out["0"].(string)
	if !ok {
		err = fmt.Errorf("failed to encode output at index 0")
		return
	}
	
	return
}

// TotalSupply calls the totalSupply method in the solidity contract
func (e *ERC777) TotalSupply(block ...web3.BlockNumber) (retval0 *big.Int, err error) {
	var out map[string]interface{}
	var ok bool

	out, err = e.c.Call("totalSupply", web3.EncodeBlock(block...))
	if err != nil {
		return
	}

	// decode outputs
	retval0, ok = out["0"].(*big.Int)
	if !ok {
		err = fmt.Errorf("failed to encode output at index 0")
		return
	}
	
	return
}

// txns

// Approve sends a approve transaction in the solidity contract
func (e *ERC777) Approve(spender web3.Address, value *big.Int) *contract.Txn {
	return e.c.Txn("approve", spender, value)
}

// AuthorizeOperator sends a authorizeOperator transaction in the solidity contract
func (e *ERC777) AuthorizeOperator(operator web3.Address) *contract.Txn {
	return e.c.Txn("authorizeOperator", operator)
}

// Burn sends a burn transaction in the solidity contract
func (e *ERC777) Burn(amount *big.Int, data []byte) *contract.Txn {
	return e.c.Txn("burn", amount, data)
}

// OperatorBurn sends a operatorBurn transaction in the solidity contract
func (e *ERC777) OperatorBurn(account web3.Address, amount *big.Int, data []byte, operatorData []byte) *contract.Txn {
	return e.c.Txn("operatorBurn", account, amount, data, operatorData)
}

// OperatorSend sends a operatorSend transaction in the solidity contract
func (e *ERC777) OperatorSend(sender web3.Address, recipient web3.Address, amount *big.Int, data []byte, operatorData []byte) *contract.Txn {
	return e.c.Txn("operatorSend", sender, recipient, amount, data, operatorData)
}

// RevokeOperator sends a revokeOperator transaction in the solidity contract
func (e *ERC777) RevokeOperator(operator web3.Address) *contract.Txn {
	return e.c.Txn("revokeOperator", operator)
}

// Send sends a send transaction in the solidity contract
func (e *ERC777) Send(recipient web3.Address, amount *big.Int, data []byte) *contract.Txn {
	return e.c.Txn("send", recipient, amount, data)
}

// Transfer sends a transfer transaction in the solidity contract
func (e *ERC777) Transfer(recipient web3.Address, amount *big.Int) *contract.Txn {
	return e.c.Txn("transfer", recipient, amount)
}

// TransferFrom sends a transferFrom transaction in the solidity contract
func (e *ERC777) TransferFrom(holder web3.Address, recipient web3.Address, amount *big.Int) *contract.Txn {
	return e.c.Txn("transferFrom", holder, recipient, amount)
}

// events

func (e *ERC777) ApprovalEventSig() web3.Hash {
	return e.c.ABI().Events["Approval"].ID()
}

func (e *ERC777) AuthorizedOperatorEventSig() web3.Hash {
	return e.c.ABI().Events["AuthorizedOperator"].ID()
}

func (e *ERC777) BurnedEventSig() web3.Hash {
	return e.c.ABI().Events["Burned"].ID()
}

func (e *ERC777) MintedEventSig() web3.Hash {
	return e.c.ABI().Events["Minted"].ID()
}

func (e *ERC777) RevokedOperatorEventSig() web3.Hash {
	return e.c.ABI().Events["RevokedOperator"].ID()
}

func (e *ERC777) SentEventSig() web3.Hash {
	return e.c.ABI().Events["Sent"].ID()
}

func (e *ERC777) TransferEventSig() web3.Hash {
	return e.c.ABI().Events["Transfer"].ID()
}
