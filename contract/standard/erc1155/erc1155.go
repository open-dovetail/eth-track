// Code generated by ethgo/abigen. DO NOT EDIT.
// Hash: b5b5ed9be96940b7b9def84dade68d64a1502cea00ce8c6a1ed8ca98d58fa913
// Version: 0.1.1
package erc1155

import (
	"fmt"
	"math/big"

	"github.com/umbracle/ethgo"
	"github.com/umbracle/ethgo/contract"
	"github.com/umbracle/ethgo/jsonrpc"
)

var (
	_ = big.NewInt
	_ = jsonrpc.NewClient
)

// ERC1155 is a solidity contract
type ERC1155 struct {
	c *contract.Contract
}

// NewERC1155 creates a new instance of the contract at a specific address
func NewERC1155(addr ethgo.Address, opts ...contract.ContractOption) *ERC1155 {
	return &ERC1155{c: contract.NewContract(addr, abiERC1155, opts...)}
}

// calls

// BalanceOf calls the balanceOf method in the solidity contract
func (e *ERC1155) BalanceOf(account ethgo.Address, id *big.Int, block ...ethgo.BlockNumber) (retval0 *big.Int, err error) {
	var out map[string]interface{}
	var ok bool

	out, err = e.c.Call("balanceOf", ethgo.EncodeBlock(block...), account, id)
	if err != nil {
		return
	}

	// decode outputs
	retval0, ok = out["0"].(*big.Int)
	if !ok {
		err = fmt.Errorf("failed to encode output at index 0")
		return
	}
	
	return
}

// BalanceOfBatch calls the balanceOfBatch method in the solidity contract
func (e *ERC1155) BalanceOfBatch(accounts []ethgo.Address, ids []*big.Int, block ...ethgo.BlockNumber) (retval0 []*big.Int, err error) {
	var out map[string]interface{}
	var ok bool

	out, err = e.c.Call("balanceOfBatch", ethgo.EncodeBlock(block...), accounts, ids)
	if err != nil {
		return
	}

	// decode outputs
	retval0, ok = out["0"].([]*big.Int)
	if !ok {
		err = fmt.Errorf("failed to encode output at index 0")
		return
	}
	
	return
}

// IsApprovedForAll calls the isApprovedForAll method in the solidity contract
func (e *ERC1155) IsApprovedForAll(account ethgo.Address, operator ethgo.Address, block ...ethgo.BlockNumber) (retval0 bool, err error) {
	var out map[string]interface{}
	var ok bool

	out, err = e.c.Call("isApprovedForAll", ethgo.EncodeBlock(block...), account, operator)
	if err != nil {
		return
	}

	// decode outputs
	retval0, ok = out["0"].(bool)
	if !ok {
		err = fmt.Errorf("failed to encode output at index 0")
		return
	}
	
	return
}

// SupportsInterface calls the supportsInterface method in the solidity contract
func (e *ERC1155) SupportsInterface(interfaceId [4]byte, block ...ethgo.BlockNumber) (retval0 bool, err error) {
	var out map[string]interface{}
	var ok bool

	out, err = e.c.Call("supportsInterface", ethgo.EncodeBlock(block...), interfaceId)
	if err != nil {
		return
	}

	// decode outputs
	retval0, ok = out["0"].(bool)
	if !ok {
		err = fmt.Errorf("failed to encode output at index 0")
		return
	}
	
	return
}

// Uri calls the uri method in the solidity contract
func (e *ERC1155) Uri(val0 *big.Int, block ...ethgo.BlockNumber) (retval0 string, err error) {
	var out map[string]interface{}
	var ok bool

	out, err = e.c.Call("uri", ethgo.EncodeBlock(block...), val0)
	if err != nil {
		return
	}

	// decode outputs
	retval0, ok = out["0"].(string)
	if !ok {
		err = fmt.Errorf("failed to encode output at index 0")
		return
	}
	
	return
}

// txns

// SafeBatchTransferFrom sends a safeBatchTransferFrom transaction in the solidity contract
func (e *ERC1155) SafeBatchTransferFrom(from ethgo.Address, to ethgo.Address, ids []*big.Int, amounts []*big.Int, data []byte) (contract.Txn, error) {
	return e.c.Txn("safeBatchTransferFrom", from, to, ids, amounts, data)
}

// SafeTransferFrom sends a safeTransferFrom transaction in the solidity contract
func (e *ERC1155) SafeTransferFrom(from ethgo.Address, to ethgo.Address, id *big.Int, amount *big.Int, data []byte) (contract.Txn, error) {
	return e.c.Txn("safeTransferFrom", from, to, id, amount, data)
}

// SetApprovalForAll sends a setApprovalForAll transaction in the solidity contract
func (e *ERC1155) SetApprovalForAll(operator ethgo.Address, approved bool) (contract.Txn, error) {
	return e.c.Txn("setApprovalForAll", operator, approved)
}

// events

func (e *ERC1155) ApprovalForAllEventSig() ethgo.Hash {
	return e.c.GetABI().Events["ApprovalForAll"].ID()
}

func (e *ERC1155) TransferBatchEventSig() ethgo.Hash {
	return e.c.GetABI().Events["TransferBatch"].ID()
}

func (e *ERC1155) TransferSingleEventSig() ethgo.Hash {
	return e.c.GetABI().Events["TransferSingle"].ID()
}

func (e *ERC1155) URIEventSig() ethgo.Hash {
	return e.c.GetABI().Events["URI"].ID()
}
